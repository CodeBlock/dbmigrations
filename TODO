
- Refactor sqlite tests so they work for any connection (which they
  should)

- Postgres support: connect to template1, create new database with
  random name, reconnect to new db.  when done, reconnect to
  template1, drop test database

- Make store path and database be command line arguments with switches
  ("-s store-path", "-d database_info").  This makes usage output
  cleaner and it makes it easier to support setting these values by
  other means (e.g., environment variables)

- Add --verbose to upgrade, apply, test, and revert? (what would this
  do?)

- InitFS: add a flag (--summary) to upgrade, apply, and revert; remove
  upgrade-list command; have --summary show the user what will be done
  without actually doing it.

- InitFS: put application into ReaderT of configuration state (command
  line options in particular)

- StoreManager: add abillity to modify the dependency list of a
  migration

  - don't ask about dependencies that would result in a
  graph cycle

- InitFS "new" confirmation: display deps in columns, sorted
  alphabetically, so we don't have to invoke a pager

- InitFS "new" command deps selection: allow j/k navigation a la darcs

- curses tool to select dependencies for a migration? could also be
  used to render / navigate a dependency structure

  - list migrations

  - let user select dependencies

  - tool to show dependency hierarchy

  - support for creating and editing migrations

    - editing: fire up editor with migration in a temp file, when
      editor closes, parse the migration and tell the user if there
      was a problem, then ask to re-invoke editor or quit. if no parse
      error, overwrite original migration file with temp file
      contents.

- Rename InitFS / initstore-fs

- improve test coverage

- make filesystem store operations die if they find a migration name
  with no corresponding disk file

- clean up code formatting (too many long lines, not enough
  decomposition)

- possibly limit how big a migration file can be to prevent tarpits (1
  MB?)

- how best (easiest for user) to tell tools how to access migration
  store and backend?  environment variables? configuration file?
  command-line arguments?  probably not *required* args, since you
  need to be able to invoke the tools quickly and easily

- postgres support

  - postgres tests
