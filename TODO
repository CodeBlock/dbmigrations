
General
=======

- Migration file format: support listing migration dependencies on
  multiple lines, since listing them all on one line (present parsing
  format) is terrible

- Use a CPP define to conditionally export code that needs to be
  tested, but isn't part of the public API, and set this define in the
  Cabal configuration for the 'test' executable

- Pull out high-level code from Moo into Database.Schema.Migrations to
  improve the high-level library API, and make Moo a (relatively) thin
  wrapper around that API

- Write convenience functions to access information in StoreData so 1)
  the code is cleaner and 2) we don't have to export field accessors
  for StoreData

- Moo "new" confirmation: display deps in columns, sorted
  alphabetically, so we don't have to invoke a pager

- Moo "new" confirmation: display deps in columns, sorted
  alphabetically, so we don't feel the need to invoke a pager

- Moo "new" command deps selection: allow j/k navigation a la darcs

Testing
=======

- Generally improve test coverage

- Write tests for mapping validation logic in Store

- Make tests display warning if they can't run the postgres tests due
  to tools not being present (createdb, dropdb) -- check that those
  exist in advance.  Also gracefully do not run the pgsql tests if the
  test database cannot be created for some other reason (permissions).

StoreManager
============

- Add abillity to modify the dependency list of a migration

  - don't ask about dependencies that would result in a
  graph cycle

- list migrations

- let user select dependencies

- show dependency hierarchy

- support for creating and editing migrations

  - editing: fire up editor with migration in a temp file, when editor
    closes, parse the migration and tell the user if there was a
    problem, then ask to re-invoke editor or quit. if no parse error,
    overwrite original migration file with temp file contents.
